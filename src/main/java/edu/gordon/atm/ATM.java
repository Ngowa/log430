/* * ATM Example system - file ATM.java * * copyright (c) 2001 - Russell C. Bjork * */package edu.gordon.atm;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.util.Properties;import org.apache.log4j.LogManager;import org.apache.log4j.Logger;import org.apache.log4j.PropertyConfigurator;import com.google.common.eventbus.EventBus;import com.google.inject.Inject;import edu.gordon.atm.event.InitialCashEvent;import edu.gordon.atm.physical.CardReader;import edu.gordon.atm.physical.CashDispenser;import edu.gordon.atm.physical.CustomerConsole;import edu.gordon.atm.physical.EnvelopeAcceptor;import edu.gordon.atm.physical.Log;import edu.gordon.atm.physical.NetworkToBank;import edu.gordon.atm.physical.OperatorPanel;import edu.gordon.atm.physical.ReceiptPrinter;import edu.gordon.banking.Money;/** * Representation for the ATM itself. An object of this class "owns" the objects * representing the component parts of the ATM, and the communications network, * and is responsible for creating customer sessions which then use it to gain * access to the component parts. This is an active class - when an instance of * the class is created, a thread is executed that actually runs the system. */public class ATM implements Runnable {	private final static Logger logger = LogManager.getLogger(ATM.class.getName());	private final EventBus eventBus;	/**	 * Constructor	 * 	 * @param eventBus	 *            the EventBus reference	 * 	 * @throws IOException	 */	@Inject	public ATM(final EventBus eventBus, 			   final Log log,			   final CardReader cardReader,			   final CashDispenser cashDispenser,			   final CustomerConsole customerConsole,			   final EnvelopeAcceptor envelopeAcceptor,			   final NetworkToBank networkToBank,			   final OperatorPanel operatorPanel,			   final ReceiptPrinter receiptPrinter) throws IOException {				// Load log4j config file		PropertyConfigurator.configure("log4j.properties");				// Load bank config file		Properties properties = new Properties();		InputStream input = new FileInputStream("bank.properties");		properties.load(input);		id = Integer.parseInt(properties.getProperty("bank.id"));		place = properties.getProperty("bank.place");		bankName = properties.getProperty("bank.name");				// Inject EventBus instance		this.eventBus = eventBus;		// Inject objects corresponding to component parts		this.cardReader = cardReader;		this.cashDispenser = cashDispenser;		this.customerConsole = customerConsole;		this.envelopeAcceptor = envelopeAcceptor;		this.networkToBank = networkToBank;		this.operatorPanel = operatorPanel;		this.receiptPrinter = receiptPrinter;		// Set up initial conditions when ATM first created		state = OFF_STATE;		switchOn = false;		cardInserted = false;	}	// Methods corresponding to major responsibilities of the ATM	/**	 * The main program/applet will create a Thread that executes this code.	 */	public void run() {		Session currentSession = null;		while (running) {			switch (state) {			case OFF_STATE:				logger.info("in an off state");				customerConsole.display("Not currently available");				synchronized (this) {					try {						wait();					} catch (InterruptedException e) {					}				}				if (switchOn) {					logger.info("perform a startup");					performStartup();					state = IDLE_STATE;				}				break;			case IDLE_STATE:				logger.info("in an idle state");				cardInserted = false;				customerConsole.display("Please insert your card");				synchronized (this) {					try {						wait();					} catch (InterruptedException e) {					}				}				if (cardInserted) {					currentSession = new Session(this, eventBus);					state = SERVING_CUSTOMER_STATE;				} else if (!switchOn) {					logger.info("perform shutdown");					performShutdown();					state = OFF_STATE;				}				break;			case SERVING_CUSTOMER_STATE:				// The following will not return until the session has				// completed				logger.info("is in a [serving customer] state");				currentSession.performSession();				state = IDLE_STATE;				break;			}		}		logger.info("thread is closed");	}	/**	 * Inform the ATM that the switch on the operator console has been moved to	 * the "on" position.	 */	public synchronized void switchOn() {		switchOn = true;		notify();	}	/**	 * Inform the ATM that the switch on the operator console has been moved to	 * the "off" position.	 */	public synchronized void switchOff() {		switchOn = false;		notify();	}	/**	 * Inform the ATM that a card has been inserted into the card reader.	 */	public synchronized void cardInserted() {		cardInserted = true;		notify();	}	// The following methods allow objects of other classes to access component	// parts of the ATM	/**	 * Accessor for id	 *	 * @return unique id of this ATM	 */	public int getID() {		return id;	}	/**	 * Accessor for place	 *	 * @return physical location of this ATM	 */	public String getPlace() {		return place;	}	/**	 * Accessor for bank name	 *	 * @return name of bank owning this ATM	 */	public String getBankName() {		return bankName;	}	/**	 * Accessor for card reader	 *	 * @return card reader component of this ATM	 */	public CardReader getCardReader() {		return cardReader;	}	/**	 * Accessor for cash dispenser	 *	 * @return cash dispenser component of this ATM	 */	public CashDispenser getCashDispenser() {		return cashDispenser;	}	/**	 * Accessor for customer console	 *	 * @return customer console component of this ATM	 */	public CustomerConsole getCustomerConsole() {		return customerConsole;	}	/**	 * Accessor for envelope acceptor	 *	 * @return envelope acceptor component of this ATM	 */	public EnvelopeAcceptor getEnvelopeAcceptor() {		return envelopeAcceptor;	}	/**	 * Accessor for network to bank	 *	 * @return network connection to bank of this ATM	 */	public NetworkToBank getNetworkToBank() {		return networkToBank;	}	/**	 * Accessor for operator panel	 *	 * @return operator panel component of this ATM	 */	public OperatorPanel getOperatorPanel() {		return operatorPanel;	}	/**	 * Accessor for receipt printer	 *	 * @return receipt printer component of this ATM	 */	public ReceiptPrinter getReceiptPrinter() {		return receiptPrinter;	}	// Private methods	/**	 * Perform the System Startup use case when switch is turned on	 */	private void performStartup() {		eventBus.post(new InitialCashEvent());				Money initialCash = operatorPanel.getInitialCash();		cashDispenser.setInitialCash(initialCash);		networkToBank.openConnection();	}	/**	 * Perform the System Shutdown use case when switch is turned off	 */	private void performShutdown() {		networkToBank.closeConnection();	}	// Instance variables recording information about the ATM	/**	 * Unique ID for this ATM	 */	private int id;	/**	 * Physical location of this ATM	 */	private String place;	/**	 * Name of the bank owning this ATM	 */	private String bankName;	// Instance variables referring to the omponent parts of the ATM	/**	 * The ATM's card reader	 */	private CardReader cardReader;	/**	 * The ATM's cash dispenser	 */	private CashDispenser cashDispenser;	/**	 * The ATM's customer console	 */	private CustomerConsole customerConsole;	/**	 * The ATM's envelope acceptor	 */	private EnvelopeAcceptor envelopeAcceptor;	/**	 * The ATM's network connection to the bank	 */	private NetworkToBank networkToBank;	/**	 * The ATM's operator panel	 */	private OperatorPanel operatorPanel;	/**	 * The ATM's receipt printer	 */	private ReceiptPrinter receiptPrinter;	private boolean running = true;	// State information	/**	 * The current state of the ATM - one of the possible values listed below	 */	private int state;	/**	 * Becomes true when the operator panel informs the ATM that the switch has	 * been turned on - becomes false when the operator panel informs the ATM	 * that the switch has been turned off.	 */	private boolean switchOn;	/**	 * Becomes true when the card reader informs the ATM that a card has been	 * inserted - the ATM will make this false when it has tried to read the	 * card	 */	private boolean cardInserted;	// Possible values for state	/**	 * The ATM is off. The switch must be turned on before it can operate	 */	private static final int OFF_STATE = 0;	/**	 * The ATM is on, but idle. It can service a customer, or it can be shut	 * down	 */	private static final int IDLE_STATE = 1;	/**	 * The ATM is servicing a customer.	 */	private static final int SERVING_CUSTOMER_STATE = 2;	public void killThread() {		running = false;	}}