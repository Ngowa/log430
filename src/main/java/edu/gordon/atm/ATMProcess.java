/* * ATM Example system - file ATM.java * * copyright (c) 2001 - Russell C. Bjork * */package edu.gordon.atm;import java.io.IOException;import org.apache.log4j.LogManager;import org.apache.log4j.Logger;import org.apache.log4j.PropertyConfigurator;import com.google.common.eventbus.EventBus;import com.google.inject.Inject;import edu.gordon.atm.event.InitialCashEvent;import edu.gordon.atm.physical.ATM;import edu.gordon.banking.Money;/** * Representation for the ATM itself. An object of this class "owns" the objects * representing the component parts of the ATM, and the communications network, * and is responsible for creating customer sessions which then use it to gain * access to the component parts. This is an active class - when an instance of * the class is created, a thread is executed that actually runs the system. */public class ATMProcess implements Runnable {	private final static Logger logger = LogManager.getLogger(ATMProcess.class.getName());		private final EventBus eventBus;		private final ATM atm;		/**	 * Running condition	 */	private boolean running = true;		/**	 * The current state of the ATM - one of the possible values listed below	 */	private int state;	// Possible values for state	/**	 * The ATM is off. The switch must be turned on before it can operate	 */	private static final int OFF_STATE = 0;	/**	 * The ATM is on, but idle. It can service a customer, or it can be shut	 * down	 */	private static final int IDLE_STATE = 1;	/**	 * The ATM is servicing a customer.	 */	private static final int SERVING_CUSTOMER_STATE = 2;	/**	 * Construtor	 * 	 * @throws IOException	 *             If the bank config fail to load, ATM will throw a IOException	 */	@Inject	public ATMProcess(final EventBus eventBus, final ATM atm) throws IOException {		// Load log4j config file		PropertyConfigurator.configure("log4j.properties");				// Inject EventBus instance		this.eventBus = eventBus;		this.atm = atm;				// Set up initial conditions when ATM first created		state = OFF_STATE;	}	// Methods corresponding to major responsibilities of the ATM	/**	 * The main program/applet will create a Thread that executes this code.	 */	@Override	public void run() {		Session currentSession = null;		while (running) {			switch (state) {			case OFF_STATE:				logger.info("in an off state");				atm.getCustomerConsole().display("Not currently available");				waitForUser();								if (atm.isSwitchOn()) {					logger.info("perform a startup");					performStartup();					state = IDLE_STATE;				}				break;			case IDLE_STATE:				logger.info("in an idle state");				atm.getCustomerConsole().display("Please insert your card");								waitForUser();								if(atm.getCardReader().cardInserted()){					currentSession = new Session(atm, eventBus);					state = SERVING_CUSTOMER_STATE;				} else if (!atm.isSwitchOn()) {					logger.info("perform shutdown");					performShutdown();					state = OFF_STATE;				}								break;			case SERVING_CUSTOMER_STATE:				// The following will not return until the session has				// completed				logger.info("is in a serving customer state");				currentSession.performSession();				state = IDLE_STATE;				break;			}		}		logger.info("thread is closed");	}		public void killThread() {		running = false;	}		/**	 * Perform the System Startup use case when switch is turned on	 */	private void performStartup() {		eventBus.post(new InitialCashEvent());		Money initialCash = atm.getOperatorPanel().getInitialCash();		atm.getCashDispenser().setInitialCash(initialCash);		atm.getNetworkToBank().openConnection();	}	/**	 * Perform the System Shutdown use case when switch is turned off	 */	private void performShutdown() {		atm.getNetworkToBank().closeConnection();	}		public synchronized void switchOn() {		atm.switchOn();		notify();	}	public synchronized void switchOff() {		atm.switchOff();		notify();	}		public synchronized void retainCard(){		atm.getCardReader().retainCard();		notify();	}		public synchronized void acceptEnvelope(boolean inserted){		atm.getEnvelopeAcceptor().acceptEnvelope(inserted);		notify();	}		public synchronized void insertCard(int number){		atm.getCardReader().insertCard(number);		notify();	}		public synchronized void setInitialCash(Money initialCash){		atm.getOperatorPanel().setInitialCash(initialCash);		notify();	}		public synchronized void setPIN(String pin){		atm.getCustomerConsole().setPIN(pin);		notify();	}		public synchronized void setMenuChoice(String choice){		atm.getCustomerConsole().setMenuChoice(choice);		notify();	}		public synchronized void setAmount(String amount){		atm.getCustomerConsole().setAmount(amount);		notify();	}		private void waitForUser(){		synchronized(this){			try {				wait();			} catch (InterruptedException e) {							}		}	}}