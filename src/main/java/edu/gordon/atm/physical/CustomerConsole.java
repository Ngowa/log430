/* * ATM Example system - file CustomerConsole.java    * * copyright (c) 2001 - Russell C. Bjork * */package edu.gordon.atm.physical;import com.google.common.eventbus.EventBus;import com.google.inject.Inject;import edu.gordon.atm.event.DisplayEvent;import edu.gordon.atm.event.PromptMenuChoiceEvent;import edu.gordon.atm.event.PromptReadPinEvent;import edu.gordon.atm.event.RequestAmountEvent;import edu.gordon.banking.Money;/** * Manager for the ATM's customer console. In a real ATM, this would manage a * physical device; in this edu.gordon.simulation, it uses classes in package * edu.gordon.simulation to simulate the device (actually two separate devices - * the display and the keyboard.) */public class CustomerConsole {	private final EventBus eventBus;	private String PIN;	private String menuChoice;	private String amount;	/**	 * Constructor	 */	@Inject	public CustomerConsole(final EventBus eventBus) {		this.eventBus = eventBus;	}	/**	 * Display a message to the customer	 *	 * @param message	 *            the message to display	 */	public void display(String message) {		eventBus.post(new DisplayEvent(message));	}	/**	 * Read a PIN entered by the customer (echoed as asterisks)	 *	 * @param prompt	 *            the message to display prompting the customer to enter PIN	 * @return the PIN that was entered	 * @exception Cancelled	 *                if customer presses the CANCEL key before pressing ENTER	 */	public void requestPIN(String prompt) throws Cancelled {		eventBus.post(new PromptReadPinEvent(prompt));	}		public int getPIN() throws Cancelled{		if (PIN == null)			throw new Cancelled();		else			return Integer.parseInt(PIN);	}		public void setPIN(String pin) {		PIN = pin;	}	/**	 * Display a menu of options and return choice made by customer	 *	 * @param prompt	 *            message to display before the list of options	 * @param menu	 *            the options	 * @return the number of the option chosen (0 .. # of options - 1) Note: the	 *         options are numbered 1 .. # of options when displayed for the	 *         customer - but the menu array indices and the final result	 *         returned are in the range 0 .. # of options - 1	 *	 * @exception Cancelled	 *                if customer presses the CANCEL key before choosing option	 */	public synchronized void requestMenuChoice(String prompt, String[] menu) throws Cancelled {		eventBus.post(new PromptMenuChoiceEvent(prompt, menu));	}		public int getMenuChoice() throws Cancelled {		if (menuChoice == null)			throw new Cancelled();		else			return Integer.parseInt(menuChoice) - 1;	}		public void setMenuChoice(String menuChoice) {		this.menuChoice = menuChoice;	}	/**	 * Read a money amount entered by the customer	 *	 * @param prompt	 *            the message to display prompting the customer to enter amount	 * @return the amount entered by the customer	 * @exception Cancelled	 *                if customer presses the CANCEL key before pressing ENTER	 */	public synchronized void requestAmount(String prompt) {		eventBus.post(new RequestAmountEvent(prompt));	}		public Money getAmount() throws Cancelled{		if (amount == null)			throw new Cancelled();		else {			int dollars = Integer.parseInt(amount) / 100;			int cents = Integer.parseInt(amount) % 100;			return new Money(dollars, cents);		}	}		public void setAmount(String amount) {		this.amount = amount;	}		/**	 * Exception thrown when the user presses the cancel key while the ATM is	 * waiting for some action	 */	public static class Cancelled extends Exception {		private static final long serialVersionUID = 1L;		/**		 * Constructor		 */		public Cancelled() {			super("Cancelled by customer");		}	}}