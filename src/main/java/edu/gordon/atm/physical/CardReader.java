/* * ATM Example system - file CardReader.java * * copyright (c) 2001 - Russell C. Bjork * */package edu.gordon.atm.physical;import org.apache.log4j.LogManager;import org.apache.log4j.Logger;import edu.gordon.banking.Card;/** * Manager for the ATM's card reader. In a real ATM, this would manage a * physical device; in this edu.gordon.simulation, it uses classes in package * edu.gordon.simulation to simulate the device. */public class CardReader {	private static Logger logger = LogManager.getLogger(CardReader.class.getName());	/**	 * Inserted card	 */	private Card card;	// In a real ATM, code would be needed to sense insertion of a card into the	// slot and notify the ATM - simulated in this case by a button in the GUI		/**	 * Insert a card	 *	 * @param cardNumber	 */	public void insertCard(int cardNumber){		logger.info(String.format("is inserting the card #%d", cardNumber));		if(card == null) {			if (cardNumber > 0) {				card = new Card(cardNumber);			} else {				card = null;			}		} else {			logger.info("has already a card inside");		}	}		/**	 * Read a card that has been partially inserted into the reader	 *	 * @param cardNumber	 * @return Card object representing information on the card if read	 *         successfully, null if not read successfully	 */	public Card readCard() {		logger.info(String.format("is reading the card #%d", card.getNumber()));		return card;	}	/**	 * Eject the card that is currently inside the reader.	 */	public void ejectCard() {		if (card != null) {			logger.info(String.format("is ejecting the card #%d", card.getNumber()));			card = null;		} else {			logger.warn(String.format("is empty and can't eject the card"));		}	}	/**	 * Retain the card that is currently inside the reader for action by the	 * bank.	 */	public void retainCard() {		logger.info(String.format("is rataining the card #%d", card.getNumber()));		// TODO - What should be done here?!	}}