/* * ATM Example system - file Simulation.java * * copyright (c) 2001 - Russell C. Bjork * */package edu.gordon.simulation;import com.google.common.eventbus.Subscribe;import com.google.inject.Inject;import edu.gordon.atm.ATMProcess;import edu.gordon.atm.event.AcceptEnvelopeEvent;import edu.gordon.atm.event.DispenseCashEvent;import edu.gordon.atm.event.DisplayEvent;import edu.gordon.atm.event.EjectCardEvent;import edu.gordon.atm.event.InitialCashEvent;import edu.gordon.atm.event.LogEvent;import edu.gordon.atm.event.PrintReceiptLineEvent;import edu.gordon.atm.event.PromptMenuChoiceEvent;import edu.gordon.atm.event.PromptReadPinEvent;import edu.gordon.atm.event.InsertCardEvent;import edu.gordon.atm.event.RequestAmountEvent;import edu.gordon.banking.Money;/** * Simulation of the physical components of the ATM, including its network * connection to the bank. An instance is created at startup by either the * application's main() program or the applet's init() method. * * The individual components are displayed in a panel belonging to class GUI. * The bank is simulated by an object belonging to class SimulatedBank. The * constructor for this class creates one instance of each. * * The static method getInstance() allows components of the ATM to access the * one and only instance of this class in order to simulate various operations. * The remaining methods simulate specific operations of the ATM, and are * forwarded to either the GUI panel or the simulated bank to actually carry * them out. */public class Simulation {	@Inject	public Simulation(ATMProcess atm) {		this.atm = atm;		// Create the simulated individual components of the ATM's GUI		operatorPanel = new SimOperatorPanel(this);		cardReader = new SimCardReader(this);		display = new SimDisplay();		cashDispenser = new SimCashDispenser();		envelopeAcceptor = new SimEnvelopeAcceptor();		receiptPrinter = new SimReceiptPrinter();		keyboard = new SimKeyboard(display, envelopeAcceptor);		// Create the GUI containing the above		gui = new GUI(operatorPanel, cardReader, display, keyboard, cashDispenser, envelopeAcceptor, receiptPrinter);	}	/**	 * Simulated getting initial amount of cash from operator	 *	 * @return value of initial cash entered	 */	public Money getInitialCash() {		return gui.getInitialCash();	}	/**	 * Simulate reading of a card	 *	 *	 * @return Card object representing information on the card if read	 *         successfully, null if not read successfully	 */	public int readCard() {		// Machine can't be turned off while there is a card in it		operatorPanel.setEnabled(false);		cardReader.animateInsertion();		// Since we don't have a magnetic stripe reader, we'll simulate by		// having customer type the card number in		return gui.readCard();	}	/**	 * Simulate ejecting a card	 */	public void ejectCard() {		cardReader.animateEjection();		// Re-enable on-off switch		operatorPanel.setEnabled(true);	}	/**	 * Simulate retaining a card	 */	public void retainCard() {		cardReader.animateRetention();		atm.retainCard();		// Re-enable on-off switch		operatorPanel.setEnabled(true);	}	/**	 * Clear the simulated display	 */	public void clearDisplay() {		display.clearDisplay();	}	/**	 * Write one or more lines to the display - beginning just after the last	 * line written	 *	 * @param text	 *            the text to display	 */	public void display(String text) {		display.display(text);	}	/**	 * Simulate reading input from the keyboard	 *	 * @param mode	 *            the input mode to use - one of the constants defined below.	 * @param maxValue	 *            the maximum acceptable value (used in MENU_MODE only)	 * @return the line that was entered - null if user pressed CANCEL.	 */	public String readInput(int mode, int maxValue) {		return keyboard.readInput(mode, maxValue);	}	/**	 * Simulate dispensing cash to a customer	 *	 * @param amount	 *            the amount of cash to dispense	 *	 *            Precondition: amount is <= cash on hand	 */	public void dispenseCash(Money amount) {		cashDispenser.animateDispensingCash(amount);	}	/**	 * Simulate accepting an envelope from customer.	 *	 * return true if an envelope was received within the prescribed time, else	 * false	 */	public void acceptEnvelope() {		atm.acceptEnvelope(envelopeAcceptor.acceptEnvelope());	}	/**	 * Simulate printing one line of a receipt	 *	 * @param text	 *            the line to print	 */	public void printReceiptLine(String text) {		receiptPrinter.println(text);	}	/**	 * Simulate printing a line to the log	 *	 * @param text	 *            the line to print	 */	public void printLogLine(String text) {		gui.printLogLine(text);	}	/**	 * Notify the ATM that the state of the on-off switch has been changed	 *	 * @param on	 *            true if state is now "on", false if it is "off"	 */	public void switchChanged(boolean on) {		// The card reader is only enabled when the switch is on		cardReader.setVisible(on);		if (on)			atm.switchOn();		else			atm.switchOff();	}	/**	 * Accessor for GUI Panel that simulates the ATM	 *	 * @return the GUI Panel	 */	public GUI getGUI() {		return gui;	}	/* Possible values for mode parameter to readInput() */	/**	 * Read input in PIN mode - allow user to enter several characters, and to	 * clear the line if the user wishes; echo as asterisks	 */	public static final int PIN_MODE = 1;	/**	 * Read input in amount mode - allow user to enter several characters, and	 * to clear the line if the user wishes; echo what use types	 */	public static final int AMOUNT_MODE = 2;	/**	 * Read input in menu choice mode - wait for one digit key to be pressed,	 * and return value immediately.	 */	public static final int MENU_MODE = 3;	/**	 * The ATM object for the ATM being simulated	 */	private ATMProcess atm;	/**	 * The simulated operator panel	 */	private SimOperatorPanel operatorPanel;	/**	 * The simulated card reader	 */	private SimCardReader cardReader;	/**	 * The simulated display	 */	private SimDisplay display;	/**	 * The simulated keyboard	 */	private SimKeyboard keyboard;	/**	 * The simulated cash dispenser	 */	private SimCashDispenser cashDispenser;	/**	 * The simulated envelope acceptor	 */	private SimEnvelopeAcceptor envelopeAcceptor;	/**	 * The simulated receipt printer	 */	private SimReceiptPrinter receiptPrinter;	/**	 * Panel containing the GUI that simulates the ATM	 */	private GUI gui;		public void openSessionRequest(){		atm.openSessionRequest();	}		@Subscribe	public void recordInsertCard(InsertCardEvent evt){		atm.insertCard(readCard());	}		@Subscribe 	public void recordLogMessage(LogEvent evt){		display(evt.getMessage());	}		@Subscribe 	public void recordEjectCard(EjectCardEvent evt){		ejectCard();	}		@Subscribe 	public void recordCashDispencer(DispenseCashEvent evt){		dispenseCash(evt.getAmount());			}		@Subscribe 	public void recordInsertEnvelope(AcceptEnvelopeEvent evt){		acceptEnvelope();	}		@Subscribe	public void recordInitialCash(InitialCashEvent evt){		atm.setInitialCash(getInitialCash());	}		@Subscribe	public void recordPrintReceiptLine(PrintReceiptLineEvent evt){		printReceiptLine(evt.getReceiptLine());	}		@Subscribe	public void recordDisplayToConsole(DisplayEvent evt){		clearDisplay();		display(evt.getMessage());	}		@Subscribe	public void recordRequestPIN(PromptReadPinEvent evt){		clearDisplay();		display(evt.getPrompt());		display("");		atm.setPIN(readInput(Simulation.PIN_MODE, 0));		clearDisplay();	}		@Subscribe	public void recordRequestMenu(PromptMenuChoiceEvent evt){		clearDisplay();		display(evt.getPrompt());				String[] menu = evt.getMenu();		for (int i = 0; i < menu.length; i++)			display((i + 1) + ") " + menu[i]);				atm.setMenuChoice(readInput(MENU_MODE, menu.length));		clearDisplay();	}		@Subscribe	public void recordRequestAmount(RequestAmountEvent evt){		clearDisplay();		display(evt.getPrompt());		display("");				atm.setAmount(readInput(Simulation.AMOUNT_MODE, 0));		clearDisplay();	}}